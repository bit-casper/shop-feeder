Notes

    celery -A webshop_manager worker -l info


Uniconta API endpoints list:
https://www.uniconta.com/da/unipedia/odata-new-query-odbc-skyen/

Shopify rest api is legacy, they recommend all apps start implementing GraphQL Admin API.
Here is a quick Python example of Shopify GraphQL: 
https://medium.com/@markwkiehl/a-beginner-guide-to-shopify-graphql-512069805678


TODO

- When creating product, we get 'product_id', 'sku' and 'inventory_item_id' in response.json() 
    We should save these in the database so we can always look up those id's locally, letting us save api calls later

- Cleanup: Move utility functions (non decorated functions) from tasks.py to utils.py

Update price workflow:
    - Get all feeds from suppliers
    - Get all products from Shopify
    - Convert all feeds to match Shopify format (JSON)
    - Scan for price changes (Feeds overwrite Shopify)
    - Write changes to Shopify

Update inventory workflow:
    - Get all feeds from suppliers
    - Get all inventory items from Shopify
    - Convert all feeds to match Shopify format (JSON)
    - Scan for inventory changes (Feeds overwrite Shopify)
    - Write changes to Shopify

Add new product workflow:
    - Get all feeds from suppliers
    - Get all products from Uniconta
    - Convert all feeds to match Uniconta format
    - Scan for new products that exist in feeds but not in Uniconta
    - Write new products to Uniconta



- tasks.py -> sync_feed_to_shops() is currently creating products, we need it to only update existing products. This is why we need inventory_id
- Move sync buttom from feed to shop
- More detailed logging (Would be nice to see which data was updated and the before and after values)




FIXED

- tasks.py - mapped fields works in same cases. Palby "OnHandAvailPhysical" specifically doesn't work according to logs from latest test, trying to push N/A when its actually 0.00
- tasks.py -> sync_feed_to_shops() is currently creating multiple products because the for-loop is arranged wrong.